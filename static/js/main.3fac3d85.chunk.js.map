{"version":3,"sources":["hooks/useGreeter.ts","hooks/useNetwork.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["localAddress","useGreeter","web3","useState","address","setAddress","useEffect","detectNetwork","then","network","address_","name","a","contract","ethers","Contract","Greeter","abi","greet","data","console","log","Error","signer","getSigner","setGreeting","transaction","wait","providerOptions","walletconnect","package","WalletConnectProvider","options","infuraId","process","web3Modal","Web3Modal","cacheProvider","useNetwork","provider","setProvider","setWeb3","connect","provider_","web3_","providers","Web3Provider","disconnect","close","clearCachedProvider","undefined","App","setNetwork","account","setAccount","setGreet","appMsg","setAppMsg","inputElm","useRef","document","createElement","handleNetwork","fetchGreeting","initFields","catch","showAppMsg","listAccounts","accounts","setNetworkAccount","err","message","setTimeout","handleConnect","handleFetch","onClick","current","value","ref","placeholder","chainId","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.3fac3d85.chunk.js","sourcesContent":["import { ethers, providers } from \"ethers\";\nimport { useEffect, useState } from \"react\";\nimport Greeter from '../artifacts/contracts/Greeter.sol/Greeter.json';\n\nconst localAddress = \"0x5FbDB2315678afecb367f032d93F642f64180aa3\"\nconst ropstenAddress = \"0xAf0eDf79D9bb4cC0481ddC0e157c906Fc5384FB8\"\n\nconst contractAddress = (networkName: string) => {\n  return networkName === \"ropsten\" ? ropstenAddress : localAddress\n}\n\ntype Props = {\n  web3: providers.Web3Provider | undefined\n}\n\nfunction useGreeter({ web3 }: Props) {\n  const [address, setAddress] = useState<string>(localAddress)\n\n  useEffect(() => {\n    web3?.detectNetwork().then((network) => {\n      const address_ = contractAddress(network.name)\n      setAddress(address_)\n    })\n  }, [web3])\n\n  const fetchGreeting = async () => {\n    if (typeof web3 === \"undefined\") return\n\n    const contract = new ethers.Contract(address, Greeter.abi, web3)\n\n    try {\n      const data = await contract.greet()\n      console.log(\"data: \", data)\n      return data\n    } catch (err) {\n      console.log(\"Error: \", err)\n      throw err\n    }\n  }\n\n  const setGreeting = async (greet: string) => {\n    if (typeof web3 === \"undefined\") return\n    if (!greet) throw new Error(\"Greet Empty\")\n\n    const signer = web3.getSigner()\n    const contract = new ethers.Contract(address, Greeter.abi, signer)\n    const transaction = await contract.setGreeting(greet)\n    await transaction.wait()\n  }\n\n  return [fetchGreeting, setGreeting] as const\n}\n\nexport default useGreeter\n","import WalletConnectProvider from \"@walletconnect/web3-provider\";\nimport { providers } from \"ethers\";\nimport { useState } from \"react\";\nimport Web3Modal from \"web3modal\";\n\nconst providerOptions = {\n  walletconnect: {\n    package: WalletConnectProvider,\n    options: {\n      infuraId: process.env.REACT_APP_INFURA_ID,\n    }\n  }\n}\n\nconst web3Modal = new Web3Modal({\n  // network: \"ropsten\",\n  cacheProvider: false,\n  providerOptions\n})\n\nfunction useNetwork() {\n  const [provider, setProvider] = useState<any>()\n  const [web3, setWeb3] = useState<providers.Web3Provider>()\n\n  const connect = async () => {\n    const provider_ = await web3Modal.connect()\n    setProvider(provider_)\n\n    const web3_ = new providers.Web3Provider(provider_)\n    setWeb3(web3_)\n  }\n\n  const disconnect = async () => {\n    // explicitly close when wallet connect is used\n    if (provider && provider.close) {\n      await provider.close()\n    }\n    web3Modal.clearCachedProvider()\n\n    setProvider(undefined)\n    setWeb3(undefined)\n  }\n\n  const handleNetwork = async () => {\n    if (typeof web3 === \"undefined\") {\n      await connect()\n    } else {\n      await disconnect()\n    }\n  }\n\n  return [{ web3 }, handleNetwork] as const\n}\n\nexport default useNetwork\n","import { providers } from 'ethers';\nimport React, { useEffect, useRef, useState } from 'react';\nimport useGreeter from './hooks/useGreeter';\nimport useNetwork from './hooks/useNetwork';\n\nfunction App() {\n  const [network, setNetwork] = useState<providers.Network>()\n  const [account, setAccount] = useState<string>()\n  const [greet, setGreet] = useState<string>()\n  const [appMsg, setAppMsg] = useState<string>()\n  const inputElm = useRef<HTMLInputElement>(document.createElement(\"input\"))\n\n  const [{ web3 }, handleNetwork] = useNetwork()\n  const [fetchGreeting, setGreeting] = useGreeter({ web3 })\n\n  useEffect(() => {\n    if (typeof web3 === \"undefined\") {\n      initFields()\n    } else {\n      const setNetworkAccount = async () => {\n        web3.detectNetwork().then(setNetwork)\n          .catch(showAppMsg)\n        web3.listAccounts().then(accounts => {\n          setAccount(accounts[0])\n        }).catch(showAppMsg)\n      }\n      setNetworkAccount()\n    }\n  }, [web3])\n\n  const initFields = () => {\n    setNetwork(undefined)\n    setAccount(undefined)\n    setGreet(undefined)\n  }\n\n  const showAppMsg = (err: any) => {\n    console.log(err)\n    setAppMsg(err.message || `${err}`)\n    setTimeout(() => setAppMsg(undefined), 7000)\n  }\n\n  const handleConnect = async () => {\n    handleNetwork().catch(showAppMsg)\n  }\n\n  const handleFetch = async () => {\n    fetchGreeting().then(setGreet).catch(showAppMsg)\n  }\n\n  const handleSet = () => {\n    setGreeting(inputElm.current.value)\n      .then(() => {\n        inputElm.current.value = \"\"\n        handleFetch()\n      })\n      .catch(showAppMsg)\n  }\n\n  return (\n    <>\n      <h5>Hardhat Ethers Greeter Dapp Demo</h5>\n      <button onClick={handleConnect}>{web3 ? \"Disconnect\" : \"Connect\"}</button><br />\n      <button onClick={handleFetch}>Fetch Greeting</button><br />\n      <button onClick={handleSet}>Set Greeting</button>\n      <input ref={inputElm} placeholder=\"Set greeting\" /><br />\n      <hr />\n      Network: {network?.chainId} {network?.name}<br />\n      Account: {account}<br />\n      Greet: {greet}<br />\n      StatusMessage: {appMsg}<br />\n      <hr />\n      <i>Note: Please try Ropsten testnet by MetaMask.</i>\n    </>\n  )\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}